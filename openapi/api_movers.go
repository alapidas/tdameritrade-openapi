/*
 * TD Ameritrade API
 *
 * TD Ameritrade API
 *
 * API version: 3.0.1
 * Contact: austin.millan@gmail.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// MoversApiService MoversApi service
type MoversApiService service

type ApiGetMoversRequest struct {
	ctx _context.Context
	ApiService *MoversApiService
	apikey *string
	index string
	direction *string
	change *string
}

func (r ApiGetMoversRequest) Apikey(apikey string) ApiGetMoversRequest {
	r.apikey = &apikey
	return r
}
func (r ApiGetMoversRequest) Direction(direction string) ApiGetMoversRequest {
	r.direction = &direction
	return r
}
func (r ApiGetMoversRequest) Change(change string) ApiGetMoversRequest {
	r.change = &change
	return r
}

func (r ApiGetMoversRequest) Execute() (Mover, *_nethttp.Response, error) {
	return r.ApiService.GetMoversExecute(r)
}

/*
 * GetMovers Retrieve mover information by index symbol, direction type and change
 * Top 10 (up or down) movers by value or percent for a particular market
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param index The index symbol to get movers from.
 * @return ApiGetMoversRequest
 */
func (a *MoversApiService) GetMovers(ctx _context.Context, index string) ApiGetMoversRequest {
	return ApiGetMoversRequest{
		ApiService: a,
		ctx: ctx,
		index: index,
	}
}

/*
 * Execute executes the request
 * @return Mover
 */
func (a *MoversApiService) GetMoversExecute(r ApiGetMoversRequest) (Mover, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Mover
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MoversApiService.GetMovers")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/marketdata/{index}/movers"
	localVarPath = strings.Replace(localVarPath, "{"+"index"+"}", _neturl.PathEscape(parameterToString(r.index, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.apikey == nil {
		return localVarReturnValue, nil, reportError("apikey is required and must be specified")
	}
	if r.direction == nil {
		return localVarReturnValue, nil, reportError("direction is required and must be specified")
	}
	if r.change == nil {
		return localVarReturnValue, nil, reportError("change is required and must be specified")
	}

	localVarQueryParams.Add("apikey", parameterToString(*r.apikey, ""))
	localVarQueryParams.Add("direction", parameterToString(*r.direction, ""))
	localVarQueryParams.Add("change", parameterToString(*r.change, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
